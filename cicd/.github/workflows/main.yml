name: Build and Deploy Web App to Server

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR file
        run: ./mvnw clean package -DskipTests

      - name: Verify files
        run: |
          ls -l target/ || echo "target/ directory not found"
          ls -l docker-compose.yml || echo "docker-compose.yml not found"
          ls -l Dockerfile || echo "Dockerfile not found"

      - name: Create target directory on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_SSH_KEY }}
          port: ${{ secrets.HOST_PORT }}
          script: |
            mkdir -p /home/${{ secrets.HOST_USER }}/prime_app
            cd /home/${{ secrets.HOST_USER }}/prime_app
            sudo docker-compose down || echo "docker-compose down failed"
            sudo docker system prune -f --volumes || echo "Docker prune failed"

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_SSH_KEY }}
          source: "target/app.jar,docker-compose.yml,Dockerfile"
          target: /home/${{ secrets.HOST_USER }}/prime_app
          port: ${{ secrets.HOST_PORT }}
          timeout: 30s
          command_timeout: 10m
          debug: true
          strip_components: 0
          overwrite: true

      - name: Deploy on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_SSH_KEY }}
          port: ${{ secrets.HOST_PORT }}
          script: |
            cd /home/${{ secrets.HOST_USER }}/prime_app
            ls -l
            echo "SPRING_DATASOURCE_URL=${{ secrets.DATASOURCE_URI }}" > .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USER }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASS }}" >> .env
            echo "SPRING_DATASOURCE_DRIVER=${{ secrets.DATASOURCE_DRIVER }}" >> .env
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TGM_BOT_TOKEN }}" >> .env
            echo "AWS_S3_BUCKET=${{ secrets.S3_BUCKET }}" >> .env
            echo "AWS_S3_REGION=${{ secrets.S3_REGION }}" >> .env
            echo "AWS_S3_ACCESS_KEY=${{ secrets.S3_ACCESS }}" >> .env
            echo "AWS_S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET }}" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET }}" >> .env
            echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> .env
            echo "JPA_DDL=${{ secrets.JPA_DDL }}" >> .env
            echo "JPA_SHOW_SQL=${{ secrets.JPA_SHOW_SQL }}" >> .env
            echo "JPA_DIALECT=${{ secrets.JPA_DIALECT }}" >> .env
            cat .env
            sudo apt-get update && sudo apt-get install -y dos2unix
            dos2unix .env
            sudo docker-compose config
            sudo docker-compose build
            sudo docker-compose up -d
            sleep 10
            sudo docker ps -a
            sudo docker logs $(sudo docker ps -q --filter "name=web_app") || echo "No web_app container logs"
            sudo docker logs $(sudo docker ps -q --filter "name=web_db") || echo "No web_db container logs"
